name: Deploy to AWS

on:
  push:
    branches:
      - main  # Set your preferred branch for deployment (e.g., main or master)

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: aws-actions

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up AWS CLI
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2  # Set your AWS region
       # Step 3: Install MySQL Client (if you need to run DB initialization, uncomment it)
   
    
    # # Step 3: Set up JDK (for building the backend)
    # - name: Set up JDK
    #   uses: actions/setup-java@v3
    #   with:
    #     distribution: 'temurin'
    #     java-version: '17'
        

    # - name: Install Gradle
    #   working-directory: ./ELP_PATH_BE  # Adjust to your backend project directory
    #   run: sudo apt  install gradle

    # - name: Test Maven Central Access
    #   working-directory: ./ELP_PATH_BE
    #   run: curl -I https://repo.maven.apache.org/maven2

    # - name: initializegradle
    #   working-directory: ./ELP_PATH_BE
    #   run: gradle init
    # - name: Version Gradle Wrapper
    #   working-directory: ./ELP_PATH_BE
    #   run:  ./gradlew --version
      
    # - name: Generate Gradle Wrapper
    #   working-directory: ./ELP_PATH_BE
    #   run:  gradle wrapper --gradle-version=7.4

    
    # - name: Set Gradle Wrapper executable
    #   run: chmod +x ./ELP_PATH_BE/gradlew  # Ensure Gradle Wrapper has execute permissions

    # - name: Build Backend with Gradle
    #   working-directory: ./ELP_PATH_BE  # Adjust to your backend project directory
    #   run: ./gradlew build --no-daemon
    # Step 6: Login to Amazon ECR
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    # Step 5: Build the Frontend Application (if needed)
    
    # - name: Build Frontend
    #   working-directory: ./ELP_PATH_FE  # Adjust to your frontend project directory
    #   run: npm install && npm run build --if-present

      # Step 7: Build and Push Frontend Docker image to ECR
    # - name: Build and Push Frontend Docker image
    #   run: |
    #     docker build -t angular-app ./ELP_PATH_FE  # Adjust path if needed
    #     docker tag angular-app:latest ${{ secrets.FRONTEND_REPO_URI }}:latest
    #     docker push ${{ secrets.FRONTEND_REPO_URI }}:latest
        
    - name: Install MySQL Client
      run: sudo apt-get install mysql-client -y  # Install MySQL client for running queries


      # Step 4: Initialize MySQL Database (optional)
    - name: Initialize MySQL Database
      run: |
        echo "Waiting for the RDS MySQL instance to be available..."
        sleep 60  # Wait for DB to initialize (adjust as necessary)
        RDS_ENDPOINT=$(aws rds describe-db-instances --query "DBInstances[?DBInstanceIdentifier=='backend-db'].Endpoint.Address" --output text)
        mysql -h $RDS_ENDPOINT -u root -p${{ secrets.DB_PASSWORD }} mydb < ./ELP_PATH_DB/elp_path_db_16.sql
        echo "Database initialization complete!"

    # Step 8: Build and Push Backend Docker image to ECR
    - name: Build and Push Backend Docker image
      run: |
        docker build -t backend-app ./ELP_PATH_BE  # Adjust path to your backend Dockerfile directory
        docker tag backend-app:latest ${{ secrets.BACKEND_REPO_URI }}:latest
        docker push ${{ secrets.BACKEND_REPO_URI }}:latest

    # Step 9: Deploy ECS Service for Frontend
    # - name: Deploy ECS frontend service
    #   run: |
    #     echo "Updating ECS Frontend Service..."
    #     FRONTEND_TASK_DEFINITION_ARN=${{ secrets.FRONTEND_TASK_DEFINITION_ARN }}
    #     aws ecs update-service --cluster frontend-cluster --service frontend-service --task-definition $FRONTEND_TASK_DEFINITION_ARN

    # Step 10: Deploy ECS Service for Backend
    - name: Deploy ECS backend service
      run: |
        echo "Updating ECS Backend Service..."
        BACKEND_TASK_DEFINITION_ARN=${{ secrets.BACKEND_TASK_DEFINITION_ARN }}
        aws ecs update-service --cluster my-cluster-back --service backend-service --task-definition $BACKEND_TASK_DEFINITION_ARN

    # Step 11: Verify ECS services are running
    # - name: Verify ECS services
    #   run: |
    #     aws ecs describe-services --cluster frontend-cluster --services frontend-service
    #     aws ecs describe-services --cluster backend-cluster --services backend-service  

    - name: Verify ECS services
      run: |
         aws ecs describe-services --cluster my-cluster-back --services backend-service 

    # - name: Install MySQL Client
    #   run: sudo apt-get install mysql-client -y

    # - name: Initialize MySQL Database
    #   run: |
    #     echo "Waiting for the RDS MySQL instance to be available..."
    #     for i in {1..10}; do
    #     RDS_ENDPOINT=$(aws rds describe-db-instances --query "DBInstances[?DBInstanceIdentifier=='backend-db'].Endpoint.Address" --output text)
    #     if [[ -n "$RDS_ENDPOINT" ]]; then
    #     echo "RDS Endpoint: $RDS_ENDPOINT"
    #     break
    #     fi
    #     sleep 10
    #     done
    #     if [[ -z "$RDS_ENDPOINT" ]]; then
    #     echo "Failed to retrieve RDS endpoint!" >&2
    #     exit 1
    #     fi
    #     mysql -h $RDS_ENDPOINT -u root -p${{ secrets.DB_PASSWORD }} mydb < ./ELP_PATH_DB/elp_path_db_16.sql
    #     echo "Database initialization complete!"

    # - name: Build and Push Backend Docker image
    #   run: |
    #     docker build -t backend-app ./ELP_PATH_BE
    #     docker tag backend-app:latest ${{ secrets.BACKEND_REPO_URI }}:${{ github.sha }}
    #     docker push ${{ secrets.BACKEND_REPO_URI }}:${{ github.sha }}

    # - name: Deploy ECS backend service
    #   run: |
    #     echo "Updating ECS Backend Service..."
    #     BACKEND_TASK_DEFINITION_ARN=${{ secrets.BACKEND_TASK_DEFINITION_ARN }}
    #     if aws ecs update-service --cluster my-cluster-back --service backend-service --task-definition $BACKEND_TASK_DEFINITION_ARN; then
    #     echo "ECS Service updated successfully."
    #     else
    #     echo "ECS Service update failed!" >&2
    #     exit 1
    #     fi

    # - name: Verify ECS services
    #   run: |
    #     aws ecs describe-services --cluster my-cluster-back --services backend-service

